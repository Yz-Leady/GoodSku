<?php

namespace Leady\Goods\Models;

use EasyWeChat\Kernel\Support\Arr;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;

class Good extends Model
{

    public    $sku_attrs;
    public    $sku_config_attrs;

    public    $sku_prices;

    protected $guarded = [];

    const STATUS_INIT    = 0;
    const STATUS_SUCCESS = 1;
    const STATUS_NORMAL  = 2;
    const STATUS_REJECT  = 3;
    const STATUS_SHELVES = 4;

    const STATUS_ARRAY = [
        self::STATUS_INIT    => '待审核',
        self::STATUS_SUCCESS => '已审核',
        self::STATUS_NORMAL  => '上架',
        self::STATUS_REJECT  => '已驳回',
        self::STATUS_SHELVES => '下架',
    ];

    const STOCK_PAID    = 0;
    const STOCK_CONFIRM = 1;

    const STOCK_ARRAY = [
        self::STOCK_PAID    => '支付扣库存',
        self::STOCK_CONFIRM => '订单扣库存',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::deleting(function ($model) {
            $model->skus()->delete();
            $model->configs()->delete();
        });
    }

    public function getSkuAttribute()
    {
        $data = [];
        if ($this->sku_type == 'many') {
            $prices      = GoodSkuPrice::whereIn('good_sku_id', $this->skus()->pluck('id')->toArray())
                                       ->get();
            $data['sku'] = [
                "type"  => "many",
                "attrs" => $this->configs->configs['attrs'],
                "sku"   => $prices->pluck('prices'),
            ];
        } elseif ($this->sku_type == 'single') {
            $data['prices'] = [];
        }
        $this->setAttribute('sku', $data);
        $this->attributes['sku'] = $data;

        return $data;
    }

    public function setSkuAttrsAttribute($value)
    {
        $this->sku_attrs = $value;
    }

    public function setSkuConfigAttrsAttribute($value)
    {
        $this->sku_config_attrs = $value;
    }

    public function setSkuPricesAttribute($value)
    {
        $this->sku_prices = $value;
    }

    /**
     * @param  array  $attrs
     * @param  array  $data
     * @return array
     */
    public static function assemblySku(array $attrs, array $datas): array
    {
        $cuteNumber = count($attrs);
        $attr       = $price = [];
        foreach ($datas as $key => $data) {
            $attr[]  = array_slice($data, 0, $cuteNumber, true);
            $price[] = $data;
        }

        return [$attr, $price];
    }

    /**
     * 返回上架商品
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeNormal(Builder $query): Builder
    {
        return $query->where('status', self::STATUS_NORMAL);
    }

    /**
     * 返回状态文字
     * @return string
     */
    protected function getStatusTextAttribute()
    {
        return self::STATUS_ARRAY[$this->status] ?? '无';
    }

    /**
     * 关联多条SKU
     * @return mixed
     */
    public function skus()
    {
        return $this->hasMany(GoodSku::class);
    }

    /**
     * 关联商品配置
     * @return mixed
     */
    public function configs()
    {
        return $this->hasOne(GoodConfig::class);
    }

}
